plugins {
    id 'com.herodevs.nes.springframework.boot' version '2.7.18-spring-boot-2.7.19-rc4'
//    id 'org.springframework.boot' version '2.7.18'
//    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id "io.freefair.lombok" version "5.3.3.3"
    id "org.ec4j.editorconfig" version "0.0.3"
    id "org.sonarqube" version "3.1.1"
    id 'com.google.cloud.tools.jib' version '3.1.4'
}

ext {
    NES_BOOT_VERSION = '2.7.18-spring-boot-2.7.19-rc4'
}


group = 'io.github.raeperd'
version = '2.1.1'
sourceCompatibility = '11'

repositories {
//    mavenLocal()
//    maven { url 'https://mvnrepository.com/artifact/org.hibernate.dialect/sqlite-dialect'}
//    maven {
//        url 'https://maven.pkg.github.com/neverendingsupport/spring-boot'
//        credentials {
//            username = "zz" // username can be blank
//            password = System.getenv("GITHUB_TOKEN")
//        }
//    }

    maven {
        url 'http://localhost:3010/maven/'
        credentials {
            username = System.getenv("NES_USERNAME")
            password = System.getenv("NES_ACCESS_TOKEN")
        }
    }
    maven { url 'https://mvnrepository.com/artifact/org.hibernate.dialect/sqlite-dialect'}

    mavenCentral()
}

//configurations.all {
//    resolutionStrategy.eachDependency { details ->
//        println "****--------------------------------------****"
//        if (details.requested.group == 'com.herodevs.nes.springframework.boot') {
//            details.useVersion('desired-version')
//            details.useTarget('org.springframework.boot:spring-boot-gradle-plugin:desired-version')  // Use this line only if changing to a different artifact
//        }
//    }
//}

dependencies {

////    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "com.herodevs.nes.springframework.boot:spring-boot-starter-web:${NES_BOOT_VERSION}"
    implementation "com.herodevs.nes.springframework.boot:spring-boot-starter-security:${NES_BOOT_VERSION}"
    implementation "com.herodevs.nes.springframework.boot:spring-boot-starter-validation:${NES_BOOT_VERSION}"
    implementation "com.herodevs.nes.springframework.boot:spring-boot-starter-data-jpa:${NES_BOOT_VERSION}"

    implementation 'com.enigmabridge:hibernate4-sqlite-dialect:0.1.2'

    // HIBERNATE 6
//    implementation 'org.hibernate.orm:hibernate-community-dialects:6.4.1.Final'


    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'io.rest-assured:rest-assured:4.5.1'
    testImplementation 'io.rest-assured:json-path:4.5.1'
    testImplementation 'io.rest-assured:xml-path:4.5.1'

//    implementation 'com.h2database:h2:2.2.224'
    implementation 'org.xerial:sqlite-jdbc:3.36.0.3'

//    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "com.herodevs.nes.springframework.boot:spring-boot-test:${NES_BOOT_VERSION}"
    testImplementation "com.herodevs.nes.springframework.boot:spring-boot-starter-test:${NES_BOOT_VERSION}"
    testImplementation "com.herodevs.nes.springframework.boot:spring-boot-test-autoconfigure:${NES_BOOT_VERSION}"
//    testImplementation 'com.herodevs.nes.springframework.boot:spring-boot-starter-test:2.7.18-spring-boot-2.7.19g'
//    testImplementation 'com.herodevs.nes.springframework.security:spring-security-test:0.0.56'
    testImplementation 'org.springframework.security:spring-security-test:5.7.11'
    testImplementation 'org.mockito:mockito-inline:3.12.1'
    testImplementation 'org.hamcrest:hamcrest:2.2'
}

apply from: 'test.gradle'

test {
    useJUnitPlatform()
}

sonarqube {
    properties {
        property "sonar.projectKey", "raeperd_realworld-springboot-java"
        property "sonar.organization", "raeperd"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

jib {
    from {
//        image = "openjdk:11.0.10-jre-buster"
        platforms {
            platform {
                architecture = 'amd64'
                os = 'linux'
            }
            platform {
                architecture = 'arm64'
                os = 'linux'
            }
        }
    }
    to {
        image = "ghcr.io/raeperd/${rootProject.name}"
    }
    container {
        ports = ["8080"]
    }
}
